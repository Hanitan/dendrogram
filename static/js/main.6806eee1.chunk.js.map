{"version":3,"sources":["index.js"],"names":["App","props","state","data","window","fetch","then","response","json","setState","this","className","DrawDendrogram","Component","console","log","margin","width","height","data_j","xScale","d3","domain","item","range","contentWidth","data_stratify","id","d","name","parentId","parent","stratify","root","size","cluster","descendants","testData","viewBox","transform","slice","map","x","i","key","r","fill","dy","children","y","font-size","textAnchor","render","document","querySelector"],"mappings":"uNAIMA,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,KAAM,MAHS,E,gEAOE,IAAD,OAElBC,OACGC,MAFc,yCAGdC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACH,GACL,EAAKM,SAAS,CAAEN,c,+BAKZ,IACAA,EAASO,KAAKR,MAAdC,KACR,OAAY,MAARA,EACK,wCAGP,yBAAKQ,UAAU,OACb,kBAACC,EAAD,CAAgBT,KAAMA,S,GA1BZU,aAgCZD,EAAiB,SAAC,GAAc,IAAZT,EAAW,EAAXA,KACxBW,QAAQC,IAAIZ,GACZ,IAEMa,EACE,GADFA,EAGC,GAGDC,EARe,IAQQD,EAJpB,GAKHE,EARgB,IAQSF,EAHrB,GAIJG,EAAShB,EAETiB,EAASC,MAEZC,OAAO,CACND,IAAOF,GAAQ,SAACI,GAAD,OAAUA,EAAKL,UAC9BG,IAAOF,GAAQ,SAACI,GAAD,OAAUA,EAAKL,YAE/BM,MAAM,CAAC,EAAGC,MAMPC,EAJWL,MAEdM,IAAG,SAACC,GAAD,OAAOA,EAAEC,QACZC,UAAS,SAACF,GAAD,OAAOA,EAAEG,SACCC,CAASb,GACzBc,EAAOZ,IAAaK,GAC1BZ,QAAQC,IAAIkB,GAEIZ,MAAaa,KAAK,CA3BZ,IA2B4BT,KAClDU,CAAQF,GACRnB,QAAQC,IAAIkB,GACZnB,QAAQC,IAAIkB,EAAKG,eAEjB,IAAMC,EAAWJ,EAAKG,cACtB,OACE,yBAAKE,QAAO,cAASrB,EAAT,YAAkBC,IAC5B,uBAAGqB,UAAS,oBAAevB,EAAf,YAA8BA,EAA9B,MACTqB,EAASG,MAAM,GAAGC,KAAI,SAAClB,GACtB,OACE,0BACEZ,UAAU,OACViB,EAAC,WAAMR,EAAOG,EAAKpB,KAAKA,KAAKe,QAA5B,YAAuCK,EAAKmB,EAA5C,oCACUtB,EAAOG,EAAKQ,OAAO5B,KAAKA,KAAKe,QADvC,YACkDK,EAAKmB,EADvD,oCAEUtB,EAAOG,EAAKQ,OAAO5B,KAAKA,KAAKe,QAFvC,YAGCK,EAAKQ,OAAOW,QAKnBL,EAASI,KAAI,SAAClB,EAAMoB,GACnB,OACE,uBACEC,IAAKD,EACLJ,UAAS,oBAAenB,EAAOG,EAAKpB,KAAKA,KAAKe,QAArC,YACPK,EAAKmB,EADE,MAIT,4BAAQG,EAAE,IAAIC,KAAK,SACnB,0BACEC,GAAG,IACHL,EAAGnB,EAAKyB,UAAY,GAAK,EACzBC,EAAE,KACFC,YAAU,MACVC,WAAY5B,EAAKyB,SAAW,MAAQ,SAEnCzB,EAAKyB,SAAW,KAAOzB,EAAKpB,KAAKA,KAAK,8BASvDiD,iBAAO,kBAACpD,EAAD,MAASqD,SAASC,cAAc,e","file":"static/js/main.6806eee1.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { render } from \"react-dom\";\nimport * as d3 from \"d3\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: null,\n    };\n  }\n\n  componentDidMount() {\n    const dataPath = \"./data/dendorogram_hosei_kaihatu.json\";\n    window\n      .fetch(dataPath)\n      .then((response) => response.json())\n      .then((data) => {\n        this.setState({ data });\n      });\n    //drawCluster();\n  }\n\n  render() {\n    const { data } = this.state;\n    if (data == null) {\n      return <div>loading</div>;\n    }\n    return (\n      <div className=\"App\">\n        <DrawDendrogram data={data} />\n      </div>\n    );\n  }\n}\n\nconst DrawDendrogram = ({ data }) => {\n  console.log(data);\n  const contentWidth = 1000;\n  const contentHeight = 800;\n  const margin = {\n    left: 80,\n    right: 20,\n    top: 20,\n    bottom: 80,\n  };\n  const width = contentWidth + margin.left + margin.right;\n  const height = contentHeight + margin.top + margin.bottom;\n  const data_j = data;\n\n  const xScale = d3\n    .scaleLinear()\n    .domain([\n      d3.max(data_j, (item) => item.height),\n      d3.min(data_j, (item) => item.height),\n    ])\n    .range([0, contentWidth - 200]);\n\n  const stratify = d3\n    .stratify()\n    .id((d) => d.name)\n    .parentId((d) => d.parent);\n  const data_stratify = stratify(data_j);\n  const root = d3.hierarchy(data_stratify);\n  console.log(root);\n\n  const cluster = d3.cluster().size([contentHeight, contentWidth - 200]);\n  cluster(root);\n  console.log(root);\n  console.log(root.descendants());\n\n  const testData = root.descendants();\n  return (\n    <svg viewBox={`0 0 ${width} ${height}`}>\n      <g transform={`translate(${margin.left},${margin.top})`}>\n        {testData.slice(1).map((item) => {\n          return (\n            <path\n              className=\"link\"\n              d={`M${xScale(item.data.data.height)},${item.x}\n                      L${xScale(item.parent.data.data.height)},${item.x}\n                      L${xScale(item.parent.data.data.height)},${\n                item.parent.x\n              }`}\n            />\n          );\n        })}\n        {testData.map((item, i) => {\n          return (\n            <g\n              key={i}\n              transform={`translate(${xScale(item.data.data.height)},${\n                item.x\n              })`}\n            >\n              <circle r=\"1\" fill=\"#555\"></circle>\n              <text\n                dy=\"5\"\n                x={item.children ? -10 : 5}\n                y=\"-4\"\n                font-size=\"30%\"\n                textAnchor={item.children ? \"end\" : \"start\"}\n              >\n                {item.children ? null : item.data.data[\"事業名\"]}\n              </text>\n            </g>\n          );\n        })}\n      </g>\n    </svg>\n  );\n};\nrender(<App />, document.querySelector(\"#content\"));\n"],"sourceRoot":""}